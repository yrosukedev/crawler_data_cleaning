// Code generated by MockGen. DO NOT EDIT.
// Source: use_case/data_reader.go

// Package use_case is a generated GoMock package.
package use_case

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataReader is a mock of DataReader interface.
type MockDataReader struct {
	ctrl     *gomock.Controller
	recorder *MockDataReaderMockRecorder
}

// MockDataReaderMockRecorder is the mock recorder for MockDataReader.
type MockDataReaderMockRecorder struct {
	mock *MockDataReader
}

// NewMockDataReader creates a new mock instance.
func NewMockDataReader(ctrl *gomock.Controller) *MockDataReader {
	mock := &MockDataReader{ctrl: ctrl}
	mock.recorder = &MockDataReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataReader) EXPECT() *MockDataReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockDataReader) Read() ([]Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDataReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataReader)(nil).Read))
}
