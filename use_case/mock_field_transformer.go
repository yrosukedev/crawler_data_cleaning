// Code generated by MockGen. DO NOT EDIT.
// Source: use_case/field_transformer.go

// Package use_case is a generated GoMock package.
package use_case

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFieldTransformer is a mock of FieldTransformer interface.
type MockFieldTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockFieldTransformerMockRecorder
}

// MockFieldTransformerMockRecorder is the mock recorder for MockFieldTransformer.
type MockFieldTransformerMockRecorder struct {
	mock *MockFieldTransformer
}

// NewMockFieldTransformer creates a new mock instance.
func NewMockFieldTransformer(ctrl *gomock.Controller) *MockFieldTransformer {
	mock := &MockFieldTransformer{ctrl: ctrl}
	mock.recorder = &MockFieldTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldTransformer) EXPECT() *MockFieldTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockFieldTransformer) Transform(fieldValue FieldValue) (FieldValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", fieldValue)
	ret0, _ := ret[0].(FieldValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockFieldTransformerMockRecorder) Transform(fieldValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockFieldTransformer)(nil).Transform), fieldValue)
}
